- op: add
  path: /objects/0
  value:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: assisted-events-streams-redis-configuration
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
    data:
      redis.conf: |-
        # User-supplied common configuration:
        # Enable AOF https://redis.io/topics/persistence#append-only-file
        appendonly yes
        # Disable RDB persistence, AOF persistence already enabled.
        save ""
        # End of common configuration
      master.conf: |-
        dir /data
        # User-supplied master configuration:
        rename-command FLUSHDB ""
        rename-command FLUSHALL ""
        # End of master configuration
      replica.conf: |-
        dir /data
        slave-read-only yes
        # User-supplied replica configuration:
        rename-command FLUSHDB ""
        rename-command FLUSHALL ""
        # End of replica configuration
- op: add
  path: /objects/0
  value:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: assisted-events-streams-redis-health
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
    data:
      ping_readiness_local.sh: |-
        #!/bin/bash

        [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
        [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
        response=$(
          timeout -s 3 $1 \
          redis-cli \
            -h localhost \
            -p $REDIS_PORT \
            ping
        )
        if [ "$?" -eq "124" ]; then
          echo "Timed out"
          exit 1
        fi
        if [ "$response" != "PONG" ]; then
          echo "$response"
          exit 1
        fi
      ping_liveness_local.sh: |-
        #!/bin/bash

        [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
        [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
        response=$(
          timeout -s 3 $1 \
          redis-cli \
            -h localhost \
            -p $REDIS_PORT \
            ping
        )
        if [ "$?" -eq "124" ]; then
          echo "Timed out"
          exit 1
        fi
        responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
        if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
          echo "$response"
          exit 1
        fi
      ping_readiness_master.sh: |-
        #!/bin/bash

        [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
        [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
        response=$(
          timeout -s 3 $1 \
          redis-cli \
            -h $REDIS_MASTER_HOST \
            -p $REDIS_MASTER_PORT_NUMBER \
            ping
        )
        if [ "$?" -eq "124" ]; then
          echo "Timed out"
          exit 1
        fi
        if [ "$response" != "PONG" ]; then
          echo "$response"
          exit 1
        fi
      ping_liveness_master.sh: |-
        #!/bin/bash

        [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
        [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
        response=$(
          timeout -s 3 $1 \
          redis-cli \
            -h $REDIS_MASTER_HOST \
            -p $REDIS_MASTER_PORT_NUMBER \
            ping
        )
        if [ "$?" -eq "124" ]; then
          echo "Timed out"
          exit 1
        fi
        responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
        if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
          echo "$response"
          exit 1
        fi
      ping_readiness_local_and_master.sh: |-
        script_dir="$(dirname "$0")"
        exit_status=0
        "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
        "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
        exit $exit_status
      ping_liveness_local_and_master.sh: |-
        script_dir="$(dirname "$0")"
        exit_status=0
        "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
        "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
        exit $exit_status
- op: add
  path: /objects/0
  value:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: assisted-events-streams-redis-scripts
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
    data:
      start-master.sh: |
        #!/bin/bash

        [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
        if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
        fi
        if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
        fi
        ARGS=("--port" "${REDIS_PORT}")
        ARGS+=("--requirepass" "${REDIS_PASSWORD}")
        ARGS+=("--masterauth" "${REDIS_PASSWORD}")
        ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
        ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
        exec redis-server "${ARGS[@]}"
- op: add
  path: /objects/0
  value:
    apiVersion: v1
    kind: Service
    metadata:
      name: assisted-events-streams-redis-headless
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
    spec:
      type: ClusterIP
      clusterIP: None
      ports:
        - name: tcp-redis
          port: 6379
          targetPort: redis
      selector:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
- op: add
  path: /objects/0
  value:
    apiVersion: v1
    kind: Service
    metadata:
      name: assisted-events-streams-redis
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
    spec:
      type: ClusterIP
      internalTrafficPolicy: Cluster
      sessionAffinity: None
      ports:
        - name: tcp-redis
          port: 6379
          targetPort: redis
          nodePort: null
      selector:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
- op: add
  path: /objects/0
  value:
    apiVersion: v1
    kind: Service
    metadata:
      name: assisted-events-streams-redis-metrics
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
        app.kubernetes.io/component: metrics
    spec:
      type: ClusterIP
      ports:
        - name: http-metrics
          port: 9121
          protocol: TCP
          targetPort: metrics
      selector:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
- op: add
  path: /objects/0
  value:
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: assisted-events-streams-redis
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: assisted-events-streams
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: assisted-events-streams
      serviceName: assisted-events-streams-redis-headless
      updateStrategy:
        rollingUpdate: {}
        type: RollingUpdate
      template:
        metadata:
          labels:
            app.kubernetes.io/name: redis
            app.kubernetes.io/instance: assisted-events-streams
        spec:
          affinity:
            podAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/name: enriched-event-projection
                    namespaces:
                      - "${NAMESPACE}"
                    topologyKey: kubernetes.io/hostname
                  weight: 1
              
          terminationGracePeriodSeconds: 30
          containers:
            - name: redis
              image: ${REDIS_IMAGE_NAME}:${REDIS_IMAGE_TAG}
              imagePullPolicy: "IfNotPresent"
              securityContext:
                runAsNonRoot: true
              command:
                - /bin/bash
              args:
                - -c
                - /opt/bitnami/scripts/start-scripts/start-master.sh
              env:
                - name: BITNAMI_DEBUG
                  value: "false"
                - name: REDIS_REPLICATION_MODE
                  value: master
                - name: ALLOW_EMPTY_PASSWORD
                  value: "no"
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_CREDENTIALS_SECRETNAME}
                      key: password
                - name: REDIS_TLS_ENABLED
                  value: "no"
                - name: REDIS_PORT
                  value: "6379"
              ports:
                - name: redis
                  containerPort: 6379
              livenessProbe:
                initialDelaySeconds: 20
                periodSeconds: 5
                # One second longer than command timeout should prevent generation of zombie processes.
                timeoutSeconds: 6
                successThreshold: 1
                failureThreshold: 5
                exec:
                  command:
                    - sh
                    - -c
                    - /health/ping_liveness_local.sh 5
              readinessProbe:
                initialDelaySeconds: 20
                periodSeconds: 5
                timeoutSeconds: 2
                successThreshold: 1
                failureThreshold: 5
                exec:
                  command:
                    - sh
                    - -c
                    - /health/ping_readiness_local.sh 1
              resources:
                limits: {}
                requests: {}
              volumeMounts:
                - name: start-scripts
                  mountPath: /opt/bitnami/scripts/start-scripts
                - name: health
                  mountPath: /health
                - name: ${REDIS_PVC_NAME}
                  mountPath: /data
                  subPath: 
                - name: config
                  mountPath: /opt/bitnami/redis/mounted-etc
                - name: redis-tmp-conf
                  mountPath: /opt/bitnami/redis/etc/
                - name: tmp
                  mountPath: /tmp
            - name: metrics
              image: ${REDIS_EXPORTER_IMAGE_NAME}:${REDIS_EXPORTER_IMAGE_TAG}
              imagePullPolicy: "IfNotPresent"
              securityContext:
                runAsNonRoot: true
              command:
                - /bin/bash
                - -c
                - |
                  if [[ -f '/secrets/redis-password' ]]; then
                  export REDIS_PASSWORD=$(cat /secrets/redis-password)
                  fi
                  redis_exporter
              env:
                - name: REDIS_ALIAS
                  value: assisted-events-streams-redis
                - name: REDIS_USER
                  value: default
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${REDIS_CREDENTIALS_SECRETNAME}
                      key: password
              ports:
                - name: metrics
                  containerPort: 9121
              resources:
                limits: {}
                requests: {}
              volumeMounts:
          volumes:
            - name: start-scripts
              configMap:
                name: assisted-events-streams-redis-scripts
                defaultMode: 0755
            - name: health
              configMap:
                name: assisted-events-streams-redis-health
                defaultMode: 0755
            - name: config
              configMap:
                name: assisted-events-streams-redis-configuration
            - name: redis-tmp-conf
              emptyDir: {}
            - name: tmp
              emptyDir: {}
      volumeClaimTemplates:
        - metadata:
            name: ${REDIS_PVC_NAME}
            labels:
              app.kubernetes.io/name: redis
              app.kubernetes.io/instance: assisted-events-streams
          spec:
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: "${REDIS_STORAGE}"
